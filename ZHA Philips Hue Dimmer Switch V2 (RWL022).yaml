blueprint:
  name: TEST ZHA Philips Hue Dimmer Switch V2 (RWL022)
  description: Control lights with a Philips Hue Dimmer Switch
  domain: automation
  input:
    dimmer_switch:
      name: Dimmer Switch
      description: The dimmer switch to use
      selector:
        device:
          integration: zha
          model: RWL022
          multiple: false
    main_scene:
      name: Main Scene
      description: Scene will be active on top press
      selector:
        entity:
          filter:
          - domain:
            - scene
          multiple: false
    light:
      name: Lights
      description: The lights to control with + / - and to turn off 
      selector:
        entity:
          domain:
          - light
          multiple: false
    last_scene:
      name: Scene dropdown helper
      description: Please select a Dropdown Helper to be used to record the scene sequence.
      selector:
        entity:
          domain:
          - input_select
          multiple: false
#  source_url: https://github.com/myevit/hass-blueprints/blob/main/ZHA%20Philips%20Hue%20Dimmer%20Switch%20V2%20(RWL022).yaml
mode: restart
max_exceeded: silent
trigger:
  platform: event
  event_type: zha_event
  event_data:
    device_id: !input dimmer_switch
action:
- variables:
    command: '{{ trigger.event.data.command }}'
    last_scene: !input last_scene
    target_lights: !input light
- choose:
  - conditions: '{{ command == ''on_press'' }}'
    sequence:
    - choose:
      - conditions: '{{ is_state(target_lights, ''on'') }}'
        sequence:
        - service: light.turn_off
          target:
            entity_id: !input light
      - conditions: '{{ is_state(target_lights, ''off'') }}'
        sequence:
        - service: scene.turn_on
          target:
            entity_id: !input main_scene
  - conditions: '{{ command == ''on_double_press'' }}'
    sequence:
    - service: scene.turn_on
      target:
        entity_id: !input main_scene
  - conditions: '{{ command == ''up_hold'' }}'
    sequence:
    - repeat:
        until: '{{ command != ''up_long_release'' }}'
        sequence:
        - delay:
            hours: 0
            minutes: 0
            seconds: 0
            milliseconds: 50
        - service: light.turn_on
          target:
            entity_id: '{{ expand(target_lights) | selectattr(''state'', ''eq'', ''on'')
              | map(attribute=''entity_id'') | list }}'
          data:
            brightness_step_pct: 15
    - service: light.turn_on
      target:
        entity_id: '{{ expand(target_lights) | selectattr(''state'', ''eq'', ''on'')
          | map(attribute=''entity_id'') | list }}'
  - conditions: '{{ command == ''up_press'' }}'
    sequence:
    - service: light.turn_on
      target:
        entity_id: '{{ expand(target_lights) | selectattr(''state'', ''eq'', ''on'')
          | map(attribute=''entity_id'') | list }}'
      data:
        brightness_step_pct: 20
    - delay:
        hours: 0
        minutes: 0
        seconds: 0
        milliseconds: 500
  - conditions: '{{ command == ''up_double_press'' }}'
    sequence:
    - service: light.turn_on
      target:
        entity_id: '{{ expand(target_lights) | selectattr(''state'', ''eq'', ''on'')
          | map(attribute=''entity_id'') | list }}'
      data:
        brightness_pct: 100
        transition: 0.5
  - conditions: '{{ command == ''down_hold'' }}'
    sequence:
    - repeat:
        until: '{{ command == ''down_long_release''}}'
        sequence:
        - choose:
          - conditions: '{{ (state_attr(target_lights, ''brightness'') - ((7/100)*254)
              | round)  >= 7 }}'
            sequence:
            - service: light.turn_on
              target:
                entity_id: '{{ expand(target_lights) | selectattr(''state'', ''eq'',
                  ''on'') | map(attribute=''entity_id'') | list }}'
              data:
                brightness_step_pct: -7
                transition: 0.5
          - conditions: '{{ (state_attr(target_lights, ''brightness'') - ((7/100)*254)
              | round)  < 7 or (state_attr(target_lights, ''brightness'') - ((10/100)*254)
              | round)  >= 1}}'
            sequence:
            - service: light.turn_on
              target:
                entity_id: '{{ expand(target_lights) | selectattr(''state'', ''eq'',
                  ''on'') | map(attribute=''entity_id'') | list }}'
              data:
                brightness_pct: 1
                transition: 0.5
        - delay:
            hours: 0
            minutes: 0
            seconds: 0
            milliseconds: 50

  - conditions: '{{ command == ''down_press'' }}'
    sequence:
    - choose:
      - conditions: '{{ (state_attr(target_lights, ''brightness'') - ((20/100)*254)
          | round)  >= 20 }}'
        sequence:
        - service: light.turn_on
          target:
            entity_id: '{{ expand(target_lights) | selectattr(''state'', ''eq'', ''on'')
              | map(attribute=''entity_id'') | list }}'
          data:
            brightness_step_pct: -20
            transition: 0.5
      - conditions: '{{ (state_attr(target_lights, ''brightness'') - ((20/100)*254)
          | round)  < 20 }}'
        sequence:
        - service: light.turn_on
          target:
            entity_id: '{{ expand(target_lights) | selectattr(''state'', ''eq'', ''on'')
              | map(attribute=''entity_id'') | list }}'
          data:
            brightness_pct: 1
            transition: 0.5
        - delay:
            hours: 0
            minutes: 0
            seconds: 0
            milliseconds: 500
  - conditions: '{{ command == ''down_double_press'' }}'
    sequence:
    - service: light.turn_on
      target:
        entity_id: '{{ expand(target_lights) | selectattr(''state'', ''eq'', ''on'')
          | map(attribute=''entity_id'') | list }}'
      data:
        brightness_pct: 1
        transition: 0.5
  - conditions: '{{ command == ''off_press'' }}'
    sequence:
    - service: scene.turn_on
      target:
        entity_id: '{{ states(last_scene) }}'
    - service: input_select.select_next
      data:
        cycle: true
      target:
        entity_id: !input last_scene
- delay:
    hours: 0
    minutes: 0
    seconds: 10
    milliseconds: 0
- service: input_select.select_first
  target:
    entity_id: !input last_scene
