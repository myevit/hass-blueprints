blueprint:
  name: "Wake-up light alarm with realistic sunrise effect. Version: 1.4.2"
  description: >
    A wake-up light alarm with a realistic brightness and color temperature sunrise effect.
  domain: automation
  homeassistant:
    min_version: "2023.1.0"
  input:
    light_entity:
      name: Wake-up light entity
      description: The light to control. Color temperature range is auto-detected.
      selector:
        entity:
          domain: light
    sunrise_duration:
      name: Sunrise duration
      description: The sunrise will start this many minutes before the timestamp.
      default: 30
      selector:
        number:
          min: 10
          max: 60
          step: 5
          unit_of_measurement: min
          mode: slider
    end_brightness:
      name: Ending brightness
      description: The final brightness level of the light at the end of the sunrise effect.
      default: 100
      selector:
        number:
          min: 10
          max: 100
          step: 1
          mode: slider
          unit_of_measurement: "%"
    keep_on_duration:
      name: Keep light on duration
      description: How long to keep the light on after the sunrise effect is complete.
      default: 60
      selector:
        number:
          min: 5
          max: 120
          step: 5
          unit_of_measurement: min
          mode: slider

variables:
  light_entity: !input light_entity
  sunrise_duration: !input sunrise_duration
  start_brightness: 1
  end_brightness: !input end_brightness
  total_steps: "{{ (end_brightness * 2.55) | round(0) }}"
  step_duration: "{{ (sunrise_duration | float) / total_steps }}"
  color_steps: [
      [139, 0, 0], # Deep dark red
      [205, 16, 0], # Dark red
      [255, 69, 0], # Red-orange
      [255, 130, 0], # Deep orange
      [255, 180, 50], # Golden yellow
      [255, 223, 150], # Very warm white/golden (much warmer end point)
    ]
  keep_on_duration: !input keep_on_duration

trigger:
  - trigger: event
    event_type: sunrise_alarm_start

action:
  # Set initial state
  - action: light.turn_on
    target:
      entity_id: !input light_entity
    data:
      brightness: "{{ start_brightness }}"
      rgb_color: "{{ color_steps[0] }}"
      transition: "{{ step_duration * 60 }}"
  - delay:
      seconds: "{{ (step_duration * 60) | round(0) }}"

  - repeat:
      count: "{{ total_steps }}"
      sequence:
        - condition: state
          entity_id: !input light_entity
          state: "on"
        - variables:
            progress: "{{ repeat.index / total_steps }}"
            current_brightness: "{{ start_brightness + repeat.index }}"
            color_progress: "{{ progress * (color_steps | length - 1) }}"
            color_index: "{{ color_progress | int }}"
        - action: light.turn_on
          target:
            entity_id: !input light_entity
          data:
            brightness: "{{ current_brightness }}"
            rgb_color: >
              {% set start = color_steps[color_index] %}
              {% set end = color_steps[color_index + 1] %}
              {% set fraction = color_progress - color_index %}
              {{ [
                (start[0] + (end[0] - start[0]) * fraction) | round,
                (start[1] + (end[1] - start[1]) * fraction) | round,
                (start[2] + (end[2] - start[2]) * fraction) | round
              ] }}
            transition: "{{ step_duration * 60 }}"
        - delay:
            seconds: "{{ (step_duration * 60) | round(0) }}"
        - if:
            - condition: or
              conditions:
                - condition: state
                  entity_id: !input light_entity
                  state: "off"
                - condition: template
                  value_template: "{{ repeat.index == total_steps - 1 }}"
          then:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: !input light_entity
                      state: "off"
                  sequence:
                    - stop: "Light turned off, aborting sunrise"
                - conditions:
                    - condition: template
                      value_template: "{{ repeat.index == total_steps - 1 }}"
                  sequence:
                    - if:
                        condition: template
                        value_template: "{{ keep_on_duration > 0 }}"
                      then:
                        - delay:
                            minutes: "{{ keep_on_duration }}"
                        - action: light.turn_off
                          target:
                            entity_id: !input light_entity
                          data:
                            transition: 30
                    - stop: "Sunrise complete"

mode: single
max_exceeded: silent
