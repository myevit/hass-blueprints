blueprint:
  name: Wake-up light alarm with realistic sunrise effect
  description: >
    A wake-up light alarm with a realistic brightness and color temperature sunrise effect.
    Requires date_time_iso sensor in configuration.
    Version: 1.1.1
  domain: automation
  homeassistant:
    min_version: "2023.1.0"
  input:
    light_entity:
      name: Wake-up light entity
      description: The light to control. Color temperature range is auto-detected.
      selector:
        entity:
          domain: light
    sunrise_duration:
      name: Sunrise duration
      description: The sunrise will start this many minutes before the timestamp.
      default: 30
      selector:
        number:
          min: 10
          max: 60
          step: 5
          unit_of_measurement: min
          mode: slider
    end_brightness:
      name: Ending brightness
      description: The final brightness level of the light at the end of the sunrise effect.
      default: 100
      selector:
        number:
          min: 10
          max: 100
          step: 1
          mode: slider
          unit_of_measurement: "%"

variables:
  light_entity: !input light_entity
  sunrise_duration: !input sunrise_duration
  start_brightness: 1
  end_brightness: !input end_brightness
  seconds: "{{ sunrise_duration * 60 }}"
  start_color: [255, 0, 0] # Deep red
  mid_color1: [255, 60, 0] # Orange-red
  mid_color2: [255, 120, 0] # Orange
  mid_color3: [255, 180, 0] # Yellow-orange
  end_color: [255, 255, 200] # Warm white

trigger:
  - trigger: state
    entity_id: !input light_entity
    from: "on"
    to: "off"

condition:
  - condition: template
    value_template: "{{ trigger.platform != 'state' }}"

action:
  - variables:
      start_time: "{{ now() }}"
      end_time: "{{ now() + timedelta(minutes=sunrise_duration) }}"

  # Set initial state
  - action: light.turn_on
    target:
      entity_id: !input light_entity
    data:
      brightness: "{{ (start_brightness * 2.55) | round }}"
      rgb_color: "{{ start_color }}"
      transition: 1

  - repeat:
      count: "{{ (sunrise_duration * 60) | int }}"
      sequence:
        - condition: state
          entity_id: !input light_entity
          state: "on"
        - variables:
            progress: "{{ repeat.index / (sunrise_duration * 60) }}"
        - action: light.turn_on
          target:
            entity_id: !input light_entity
          data:
            brightness: >
              {{ ((start_brightness + (end_brightness - start_brightness) 
              * (progress ** 2) * (3 - 2 * progress)) * 2.55) | round }}
            rgb_color: >
              {% if progress < 0.25 %}
                {% set f = progress * 4 %}
                {{ [
                  (start_color[0] + (mid_color1[0] - start_color[0]) * f) | round,
                  (start_color[1] + (mid_color1[1] - start_color[1]) * f) | round,
                  (start_color[2] + (mid_color1[2] - start_color[2]) * f) | round
                ] }}
              {% elif progress < 0.5 %}
                {% set f = (progress - 0.25) * 4 %}
                {{ [
                  (mid_color1[0] + (mid_color2[0] - mid_color1[0]) * f) | round,
                  (mid_color1[1] + (mid_color2[1] - mid_color1[1]) * f) | round,
                  (mid_color1[2] + (mid_color2[2] - mid_color1[2]) * f) | round
                ] }}
              {% elif progress < 0.75 %}
                {% set f = (progress - 0.5) * 4 %}
                {{ [
                  (mid_color2[0] + (mid_color3[0] - mid_color2[0]) * f) | round,
                  (mid_color2[1] + (mid_color3[1] - mid_color2[1]) * f) | round,
                  (mid_color2[2] + (mid_color3[2] - mid_color2[2]) * f) | round
                ] }}
              {% else %}
                {% set f = (progress - 0.75) * 4 %}
                {{ [
                  (mid_color3[0] + (end_color[0] - mid_color3[0]) * f) | round,
                  (mid_color3[1] + (end_color[1] - mid_color3[1]) * f) | round,
                  (mid_color3[2] + (end_color[2] - mid_color3[2]) * f) | round
                ] }}
              {% endif %}
            transition: 1
        - delay:
            seconds: 1
        - if:
            - condition: or
              conditions:
                - condition: state
                  entity_id: !input light_entity
                  state: "off"
                - condition: template
                  value_template: "{{ repeat.index == (sunrise_duration * 60) - 1 }}"
          then:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: !input light_entity
                      state: "off"
                  sequence:
                    - stop: "Light turned off, aborting sunrise"
                - conditions:
                    - condition: template
                      value_template: "{{ repeat.index == (sunrise_duration * 60) - 1 }}"
                  sequence:
                    - stop: "Sunrise complete"

mode: single

max_exceeded: silent
