blueprint:
  name: MQTT Philips Hue Dimmer Switch (RWL020) v2.1.9
  description: Control lights with a Philips Hue Dimmer Switch
  domain: automation
  input:
    dimmer_switch:
      name: Dimmer Switch
      description: Select your Philips Hue Dimmer Switch
      selector:
        device:
          integration: mqtt
          manufacturer: Philips
          model: "Hue dimmer switch (324131092621)"
          multiple: false

    aux_scene_on:
      name: ON Button Aux Scene
      description: Scene will be active on double ON press
      selector:
        entity:
          filter:
            - domain:
                - scene
          multiple: false

    aux_scene_off:
      name: Off Button Aux Scene
      description: Scene will be active on double OFF press
      selector:
        entity:
          filter:
            - domain:
                - scene
          multiple: false

    light:
      name: Lights
      description: The lights to control with + / - and to turn off
      selector:
        entity:
          domain:
            - light
          multiple: false

    included_scenes:
      name: ON Button Scene Cycle
      description: Scenes to be included in ON press cycle
      default: []
      selector:
        entity:
          filter:
            domain: scene
          multiple: true

    scene_helper:
      name: Scene helper
      description: Please select an Input Text Helper to be used to record the scene sequence.
      selector:
        entity:
          domain:
            - input_text
          multiple: false

    transition_time:
      name: Transition time
      description: Transition time when changes
      default: 1
      selector:
        number:
          min: 0
          max: 3
          step: 0.1
          unit_of_measurement: sec

    hold_press_change:
      name: Hold press change
      description: Transition time between changes
      default: 17
      selector:
        number:
          min: 0
          max: 25
          step: 1
          unit_of_measurement: "%"

    reset_after:
      name: Reset After
      description: Timeout can be set after which the order is reset to the first scene.
      default: 5
      selector:
        number:
          min: 1
          max: 120
          step: 1
          unit_of_measurement: s

mode: restart
max_exceeded: silent
trigger:
  - platform: mqtt
    topic: "zigbee2mqtt/+/action"
    value_template: >-
      {% set device = trigger.topic.split('/')[1] %}
      {% if device == device_attr(dimmer_switch, 'name') %}
        {{ trigger.payload }}
      {% endif %}

action:
  - variables:
      command: "{{ trigger.payload }}"
      included_scenes: !input included_scenes
      scene_helper: !input scene_helper
      reset_after: !input reset_after
      active_scene: >
        {% set data = states(scene_helper) %}
        {% if data != "unknown" %}
          {% if (as_timestamp(now()) - (data | from_json).timestamp) < reset_after %}
            {{ (data | from_json).scene }}
          {% else %}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}
      target_lights: !input light
      hold_press_change: !input hold_press_change

  - choose:
      - conditions: "{{ command == 'on_press' }}"
        sequence:
          - service: scene.turn_on
            data_template:
              transition: !input transition_time
              entity_id: >
                {{ included_scenes[active_scene] }}
          - service: input_text.set_value
            target:
              entity_id: !input scene_helper
            data:
              value: >
                {{ {"scene": active_scene + 1, "timestamp": as_timestamp(now())} | to_json }}

      - conditions: "{{ command == 'on_double_press' }}"
        sequence:
          - service: scene.turn_on
            target:
              entity_id: !input aux_scene_on

      - conditions:
          - "{{ command == 'up_hold' or command == 'up_press'}}"
        sequence:
          - choose:
              - conditions:
                  "{{ (state_attr(target_lights, 'brightness') + ((hold_press_change/100)*254)
                  | round)  <= 255 }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id:
                        "{{ expand(target_lights) | selectattr('state', 'eq',
                        'on') | map(attribute='entity_id') | list }}"
                    data:
                      brightness_step_pct: "{{ hold_press_change }}"
                      transition: !input transition_time
              - conditions:
                  "{{ (state_attr(target_lights, 'brightness') + ((hold_press_change/100)*254)
                  | round)  > 255 }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id:
                        "{{ expand(target_lights) | selectattr('state', 'eq',
                        'on') | map(attribute='entity_id') | list }}"
                    data:
                      brightness_pct: 100
                      transition: !input transition_time

      - conditions: "{{ command == 'up_double_press' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id:
                "{{ expand(target_lights) | selectattr('state', 'eq', 'on')
                | map(attribute='entity_id') | list }}"
            data:
              brightness_pct: 100
              transition: !input transition_time

      - conditions:
          - "{{ command == 'down_hold' or command == 'down_press' }}"
        sequence:
          - choose:
              - conditions:
                  "{{ (state_attr(target_lights, 'brightness') - ((hold_press_change/100)*254)
                  | round)  >= hold_press_change }}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id:
                        "{{ expand(target_lights) | selectattr('state', 'eq',
                        'on') | map(attribute='entity_id') | list }}"
                    data:
                      brightness_step_pct: "{{ -hold_press_change }}"
                      transition: !input transition_time

              - conditions:
                  "{{ (state_attr(target_lights, 'brightness') - ((hold_press_change/100)*254)
                  | round)  < hold_press_change or (state_attr(target_lights, 'brightness') - ((hold_press_change/100)*254)
                  | round)  >= 1}}"
                sequence:
                  - service: light.turn_on
                    target:
                      entity_id:
                        "{{ expand(target_lights) | selectattr('state', 'eq',
                        'on') | map(attribute='entity_id') | list }}"
                    data:
                      brightness_pct: 1
                      transition: !input transition_time

      - conditions: "{{ command == 'down_double_press' }}"
        sequence:
          - service: light.turn_on
            target:
              entity_id:
                "{{ expand(target_lights) | selectattr('state', 'eq', 'on')
                | map(attribute='entity_id') | list }}"
            data:
              brightness_pct: 1
              transition: !input transition_time

      - conditions: "{{ command == 'off_press' }}"
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input light

      - conditions: "{{ command == 'off_double_press' }}"
        sequence:
          - service: scene.turn_on
            target:
              entity_id: !input aux_scene_off

  - delay:
      hours: 0
      minutes: 0
      seconds: !input reset_after
      milliseconds: 0
  - service: input_text.set_value
    target:
      entity_id: !input scene_helper
    data:
      value: >
        {{ {"scene": 0, "timestamp": as_timestamp(now())} | to_json }}
